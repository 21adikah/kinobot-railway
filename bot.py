import requests
import os
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TMDB_API_KEY = os.environ.get("TMDB_API_KEY")
BOT_TOKEN = os.environ.get("BOT_TOKEN")

# –í–†–ï–ú–ï–ù–ù–û–ï —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ (RAM, —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ Railway)
watched_movies = {}

def add_watched(user_id, movie_id):
    watched_movies.setdefault(str(user_id), set()).add(movie_id)

def remove_watched(user_id, movie_id):
    watched_movies.setdefault(str(user_id), set()).discard(movie_id)

def is_watched(user_id, movie_id):
    return movie_id in watched_movies.get(str(user_id), set())

def search_tmdb_movies(query):
    url = f"https://api.themoviedb.org/3/search/movie?api_key={TMDB_API_KEY}&query={query}&language=ru"
    response = requests.get(url)
    return response.json().get("results", [])

def get_movie_details(movie_id):
    url = f"https://api.themoviedb.org/3/movie/{movie_id}?api_key={TMDB_API_KEY}&language=ru&append_to_response=external_ids"
    return requests.get(url).json()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üé¨ –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.message.text
    movies = search_tmdb_movies(query)

    if not movies:
        await update.message.reply_text("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    keyboard = [
        [InlineKeyboardButton(f"{m['title']} ({m.get('release_date', '')[:4]})", callback_data=str(m["id"]))]
        for m in movies[:5]
    ]
    await update.message.reply_text("üîç –í—ã–±–µ—Ä–∏ —Ñ–∏–ª—å–º:", reply_markup=InlineKeyboardMarkup(keyboard))

async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data
    user_id = update.effective_user.id

    if data.startswith("watch_"):
        movie_id = data.split("_")[2]
        if is_watched(user_id, movie_id):
            remove_watched(user_id, movie_id)
        else:
            add_watched(user_id, movie_id)

        movie = get_movie_details(movie_id)
        await send_movie_card(query.message, movie, is_watched(user_id, movie_id))
    else:
        movie = get_movie_details(data)
        await send_movie_card(query.message, movie, is_watched(user_id, data))

async def send_movie_card(message, movie, is_watched=False):
    movie_id = str(movie['id'])
    title = movie['title']
    year = movie.get('release_date', '')[:4]
    rating = movie.get('vote_average', '‚Äì')
    genres = ", ".join([g['name'] for g in movie.get('genres', [])[:2]])
    runtime = movie.get('runtime') or 0
    hours, minutes = divmod(runtime, 60)
    runtime_str = f"{hours}—á {minutes}–º–∏–Ω" if hours else f"{minutes}–º–∏–Ω"
    overview = movie.get('overview', '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.')

    watched_mark = "‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ" if is_watched else "üé¨ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π"
    caption = f"<b>{title}</b> ({year})\n‚≠ê iMDb: {rating:.1f}\nüé≠ –ñ–∞–Ω—Ä: {genres}\n‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {runtime_str}\n\n<tg-spoiler>{overview}</tg-spoiler>"
    keyboard = [[InlineKeyboardButton(watched_mark, callback_data=f"watch_toggle_{movie_id}")]]
    markup = InlineKeyboardMarkup(keyboard)

    poster_path = movie.get('poster_path')
    if poster_path:
        image_url = f"https://image.tmdb.org/t/p/w500{poster_path}"
        await message.reply_photo(photo=image_url, caption=caption, parse_mode='HTML', reply_markup=markup)
    else:
        await message.reply_text(caption, parse_mode='HTML', reply_markup=markup)

if __name__ == '__main__':
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ Railway!")
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CallbackQueryHandler(handle_button))

    # üî• –£–¥–µ—Ä–∂–∏–≤–∞–µ–º polling –∏ –ª–æ–≥–∏—Ä—É–µ–º –≤—Å—ë, —á—Ç–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç
    app.run_polling(allowed_updates=Update.ALL_TYPES)

